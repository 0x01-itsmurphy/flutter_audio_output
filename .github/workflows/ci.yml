name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.19.0'
  JAVA_VERSION: '17'

jobs:
  # Code Quality and Analysis
  analyze:
    name: üîç Code Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: üì¶ Install dependencies
        run: flutter pub get

      - name: üîç Verify formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: üìä Analyze project source
        run: flutter analyze

      - name: üß™ Run unit tests
        run: flutter test --coverage

      - name: üìà Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false

  # Android Build and Test
  test-android:
    name: ü§ñ Android Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: analyze
    
    strategy:
      matrix:
        api-level: [21, 29, 33]
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: üì¶ Install dependencies
        run: flutter pub get

      - name: üîß Build Android APK
        working-directory: example
        run: flutter build apk --debug

      - name: üß™ Run Android unit tests
        working-directory: example
        run: flutter test

      - name: üì± Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: üöÄ Run Android integration tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          script: |
            cd example
            flutter drive --driver=test_driver/integration_test.dart --target=integration_test/app_test.dart

  # iOS Build and Test
  test-ios:
    name: üçé iOS Build & Test
    runs-on: macos-14
    timeout-minutes: 45
    needs: analyze
    
    strategy:
      matrix:
        device: ['iPhone 15', 'iPad Air (5th generation)']
        ios-version: ['17.2']
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: üì¶ Install dependencies
        run: flutter pub get

      - name: üçé Setup iOS
        working-directory: example/ios
        run: |
          pod install
          xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Debug -destination 'platform=iOS Simulator,name=${{ matrix.device }},OS=${{ matrix.ios-version }}' build

      - name: üß™ Run iOS unit tests
        working-directory: example
        run: flutter test

      - name: üöÄ Run iOS integration tests
        working-directory: example
        run: |
          flutter drive \
            --driver=test_driver/integration_test.dart \
            --target=integration_test/app_test.dart \
            -d "iPhone 15 Simulator"

  # Example App Build
  build-examples:
    name: üèóÔ∏è Build Example Apps
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: [test-android, test-ios]
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-14]
        include:
          - os: ubuntu-latest
            build-target: 'android'
            build-command: 'flutter build apk --release'
          - os: macos-14
            build-target: 'ios'
            build-command: 'flutter build ios --release --no-codesign'
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: ‚òï Setup Java (Android)
        if: matrix.build-target == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: üì¶ Install dependencies
        run: flutter pub get

      - name: üçé Setup iOS dependencies
        if: matrix.build-target == 'ios'
        working-directory: example/ios
        run: pod install

      - name: üèóÔ∏è Build ${{ matrix.build-target }}
        working-directory: example
        run: ${{ matrix.build-command }}

      - name: üì§ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build-target }}-build
          path: |
            example/build/app/outputs/flutter-apk/*.apk
            example/build/ios/Release-iphoneos/*.app
          retention-days: 7

  # Package Validation
  validate-package:
    name: üì¶ Validate Package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: analyze
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: üì¶ Install dependencies
        run: flutter pub get

      - name: üîç Validate package
        run: |
          flutter pub publish --dry-run
          dart pub global activate pana
          pana --no-warning

      - name: üìä Check package score
        run: |
          echo "Package validation completed successfully!"
          echo "Ready for publishing to pub.dev"

  # Security Scan
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: üîí Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: üì§ Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Documentation Check
  docs-check:
    name: üìö Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: üì¶ Install dependencies
        run: flutter pub get

      - name: üìñ Generate documentation
        run: dart doc

      - name: ‚úÖ Check documentation completeness
        run: |
          echo "Checking for missing documentation..."
          find lib -name "*.dart" -exec grep -L "///" {} \; > undocumented.txt
          if [ -s undocumented.txt ]; then
            echo "‚ö†Ô∏è  Files missing documentation:"
            cat undocumented.txt
            exit 1
          else
            echo "‚úÖ All public APIs are documented!"
          fi

  # Final Status Check
  ci-success:
    name: ‚úÖ CI Success
    runs-on: ubuntu-latest
    needs: [analyze, test-android, test-ios, build-examples, validate-package, security-scan, docs-check]
    if: always()
    
    steps:
      - name: ‚úÖ Check all jobs status
        run: |
          if [[ "${{ needs.analyze.result }}" == "success" && \
                "${{ needs.test-android.result }}" == "success" && \
                "${{ needs.test-ios.result }}" == "success" && \
                "${{ needs.build-examples.result }}" == "success" && \
                "${{ needs.validate-package.result }}" == "success" && \
                "${{ needs.security-scan.result }}" == "success" && \
                "${{ needs.docs-check.result }}" == "success" ]]; then
            echo "üéâ All CI checks passed successfully!"
            echo "‚úÖ Ready for deployment and publishing!"
          else
            echo "‚ùå Some CI checks failed. Please review the logs."
            exit 1
          fi
